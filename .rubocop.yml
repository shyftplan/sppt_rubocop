# This file only lists settings that are different from the default ones as all configurations inherit from default options linked below
# https://github.com/bbatsov/rubocop/blob/master/config/default.yml
#
# Import in another Rubocop config with the following lines:
#inherit_from:
#  - https://raw.githubusercontent.com/shyftplan/sppt_rubocop/master/.rubocop.yml
#
# Ignore in Git the locally cached Rubocop remote config by adding the following line in .gitignore:
#.rubocop-http*

AllCops:
  # Cop names are displayed in offense messages.
  DisplayCopNames: true
  # Style guide URLs are displayed in offense messages.
  DisplayStyleGuide: true
  Exclude:
    - 'tmp/**/*'
    - 'vendor/**/*'

############################## DISABLED ##############################

Layout/AlignHash:
  Description: 'Align the elements of a hash literal if they span more than one line'
  Enabled: false

Layout/IndentHash:
  Description: 'Checks the indentation of the first key in a hash literal'
  Enabled: false

Style/AsciiComments:
  Description: 'Check for non-ascii (non-English) characters in comments'
  Enabled: false

Style/BracesAroundHashParameters:
  Description: 'Enforce braces style around hash parameters'
  Enabled: false

Style/Documentation:
  Description: 'Document classes and non-namespace modules'
  Enabled: false

# Not production-ready as many gems will be causing errors when using this
Style/FrozenStringLiteralComment:
  Description: 'Add the comment `# frozen_string_literal: true` to the top of files to enable frozen string literals'
  Enabled: false

Style/Lambda:
  Description: 'Check for uses of the lambda literal syntax for single line lambdas, and the method call syntax for multiline lambdas'
  Enabled: false

Style/NumericLiterals:
  Description: 'Check for big numeric literals without _ between groups of digits in them'
  Enabled: false

############################## ENABLED ##############################

Layout/AlignArray:
  ### bad
  # a = [1, 2, 3,
  #   4, 5, 6]
  # array = ['run',
  #     'forrest',
  #     'run']
  #
  ### good
  # a = [1, 2, 3,
  #     4, 5, 6]
  # a = ['run',
  #     'forrest',
  #     'run']
  Description: 'Align the elements of an array literal if they span more than one line'
  StyleGuide: 'https://github.com/bbatsov/ruby-style-guide#align-multiline-arrays'

Layout/AlignParameters:
  ### good
  #
  # foo :bar,
  #   :baz
  #
  ### bad
  #
  # foo :bar,
  #     :baz
  Description: 'Check if the parameters on a multi-line method call or definition are aligned'
  EnforcedStyle: with_fixed_indentation

Layout/MultilineOperationIndentation:
  ### bad
  # if a +
  #    b
  #   something
  # end
  #
  ### good
  # if a +
  #     b
  #   something
  # end
  Description: 'Check the indentation of the right hand side operand in binary operations that span more than one line'
  EnforcedStyle: indented

Layout/SpaceAroundOperators:
  ### bad
  # total = 3*4
  # "apple"+"juice"
  # my_number = 38/4
  # a ** b
  #
  ### good
  # total = 3 * 4
  # "apple" + "juice"
  # my_number = 38 / 4
  # a**b
  Description: 'Check that operators have space around them, except for ** which should not have surrounding space'
  AllowForAlignment: true

Metrics/LineLength:
  Description: 'Check the length of lines in the source code'
  Max: 120

Metrics/MethodLength:
  Description: 'Check if the length of a method exceeds some maximum value. Comment lines can optionally be ignored'
  Max: 10
  CountComments: false

Metrics/ParameterLists:
  Description: 'Check for methods with too many parameters'
  Max: 5

Style/Alias:
  ### bad
  # alias :bar :foo
  # alias bar foo
  #
  ### good
  # alias_method :bar, :foo
  Description: 'Enforce the use of either #alias or #alias_method'
  EnforcedStyle: prefer_alias_method

Style/BlockDelimiters:
  ### Prefer `do...end` over `{...}` for procedural blocks.
  #
  ### return value is used/assigned
  ### bad
  # foo = map do |x|
  #   x
  # end
  # puts (map do |x|
  #   x
  # end)
  #
  ### return value is not used out of scope
  ### good
  # map do |x|
  #   x
  # end
  #
  ### Prefer `{...}` over `do...end` for functional blocks.
  #
  ### return value is not used out of scope
  ### bad
  # each { |x|
  #   x
  # }
  #
  ### return value is used/assigned
  ### good
  # foo = map { |x|
  #   x
  # }
  # map { |x|
  #   x
  # }.inspect
  Description: 'Check for uses of braces or do/end around single line or multi-line blocks'
  EnforcedStyle: semantic
  FunctionalMethods:
    - let
    - let!
    - map
    - subject
    - watch
  IgnoredMethods:
    - lambda
    - proc
    - it
    - its
    - xit
    - specify

Style/SignalException:
  ### The `semantic` style enforces the use of `fail` to signal an exception,
  ### then will use `raise` to trigger an offense after it has been rescued.
  ### bad
  # begin
  #   raise
  # rescue Exception
  #   # handle it
  # end
  #
  # def watch_out
  #   # Error thrown
  # rescue Exception
  #   fail
  # end
  #
  # Kernel.fail
  # Kernel.raise
  #
  ### good
  # begin
  #   fail
  # rescue Exception
  #   # handle it
  # end
  #
  # def watch_out
  #   fail
  # rescue Exception
  #   raise 'Preferably with descriptive message'
  # end
  #
  # explicit_receiver.fail
  # explicit_receiver.raise
  Description: 'Check for uses of fail and raise'
  EnforcedStyle: semantic

Style/SymbolArray:
  ### good
  # [:foo, :bar, :baz]
  #
  ### bad
  # %i[foo bar baz
  Description: 'Check for array literals made up of symbols that are not using the %i() syntax'
  EnforcedStyle: brackets
